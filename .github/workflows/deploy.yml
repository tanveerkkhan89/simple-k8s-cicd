name: Java Maven CI Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Build Maven Project
    runs-on: [self-hosted, Linux, X64]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Show directory structure
        run: ls -R

      - name: Build with Maven
        run: mvn clean package
        working-directory: java-hello-world-with-maven

  static-analysis:
    name: SonarQube Scan
    runs-on: [self-hosted, Linux, X64]
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          cd java-hello-world-with-maven
          mvn sonar:sonar \
            -Dsonar.projectKey=maigolab_hello \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  image:
    name: Build & Scan Docker Image
    runs-on: [self-hosted, Linux, X64]
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug sudo permissions and user
        run: |
          echo "Current user: $(whoami)"
          sudo -n true && echo "Passwordless sudo works" || echo "Password prompt required"

      - name: Build Docker Image (Fallback without sudo)
        working-directory: java-hello-world-with-maven
        run: |
          echo "Trying with sudo first..."
          if ! sudo -n nerdctl build -t java-maven-app:latest .; then
            echo "Falling back to non-sudo build..."
            export XDG_RUNTIME_DIR="/run/user/$(id -u)"
            nerdctl build -t java-maven-app:latest .
          fi

      - name: Trivy Scan Docker Image
        run: trivy image java-maven-app:latest

      - name: Docker Login
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | nerdctl login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Docker Tag & Push
        run: |
          nerdctl tag java-maven-app:latest ${{ secrets.DOCKER_USERNAME }}/java-maven-app:latest
          nerdctl push ${{ secrets.DOCKER_USERNAME }}/java-maven-app:latest

  deploy:
    name: Deploy to Kubernetes
    runs-on: [self-hosted, Linux, X64]
    needs: image

    steps:
      - name: Set up Kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG_DATA }}" | base64 --decode > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
          kubectl version --client

      - name: Deploy Manifest
        run: |
          export KUBECONFIG=$HOME/.kube/config
          kubectl apply -f manifest/
